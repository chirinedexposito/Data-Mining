# -*- coding: utf-8 -*-
"""Modélisation_CatBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fP3-VLLnKqiQCJoILuYNatouPrUFhpUI

#Modelisation avec CatBoost
"""

import pandas as pd
from catboost import CatBoostClassifier, Pool
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import roc_auc_score
import numpy as np

"""Chargement des donnees apres Feature Engineering"""

dossier_donnees = "./Data/"
chemin_train = dossier_donnees + "train_feature_engineering.csv"
chemin_test = dossier_donnees + "test_feature_engineering.csv"

train = pd.read_csv(chemin_train)
test = pd.read_csv(chemin_test)

"""Séparer les caractéristiques et la cible"""

cible = 'Exited'
caracteristiques = [col for col in train.columns if col != cible]

"""Initialisation des paramètres pour CatBoost"""

n_folds = 5
iterations = 1000
learning_rate = 0.02
random_seed = 27

"""K-Fold cross-validation pour CatBoost"""

folds = StratifiedKFold(n_splits=n_folds, random_state=random_seed, shuffle=True)

test_predictions = np.zeros(len(test))
auc_scores = []

for fold, (train_idx, valid_idx) in enumerate(folds.split(train[caracteristiques], train[cible])):
    X_train, y_train = train.iloc[train_idx][caracteristiques], train.iloc[train_idx][cible]
    X_valid, y_valid = train.iloc[valid_idx][caracteristiques], train.iloc[valid_idx][cible]

    train_pool = Pool(X_train, y_train)
    valid_pool = Pool(X_valid, y_valid)

    model = CatBoostClassifier(
        iterations=iterations,
        learning_rate=learning_rate,
        eval_metric='AUC',
        random_seed=random_seed,
        verbose=200
    )

    model.fit(train_pool, eval_set=valid_pool, early_stopping_rounds=100)

    # Validation
    valid_preds = model.predict_proba(X_valid)[:, 1]
    auc = roc_auc_score(y_valid, valid_preds)
    auc_scores.append(auc)
    print(f"Fold {fold + 1} AUC: {auc:.4f}")

    # Prédictions sur le jeu de test
    test_preds = model.predict_proba(test[caracteristiques])[:, 1]
    test_predictions += test_preds / n_folds

print(f"Moyenne AUC des folds: {np.mean(auc_scores):.4f}")

"""Sauvegarder les prédictions finales"""

test['Predictions_CatBoost'] = test_predictions
test[['id', 'Predictions_CatBoost']].to_csv(dossier_donnees + "test_predictions_catboost.csv", index=False)